@model List<IndustryX.Domain.Entities.Order>

@{
    ViewData["Title"] = "Order Management";
    var selectedStatus = Context.Request.Query["status"].ToString();
    var customerQuery = Context.Request.Query["customer"].ToString();
    var startDate = Context.Request.Query["startDate"].ToString();
    var endDate = Context.Request.Query["endDate"].ToString();
    int selectedPageSize = int.TryParse(Context.Request.Query["pageSize"], out var size) ? size : 10;
}

<div class="my-4 p-4 bg-light rounded shadow-sm">
    <h2 class="text-primary mb-4"><i class="fas fa-clipboard-list me-2"></i> Order Management</h2>

    <!-- Filter Form -->
    <form method="get" class="row g-3 mb-4 align-items-end">
        <div class="col-md-2">
            <label class="form-label">Status</label>
            <select name="status" class="form-select">
                <option value="">All</option>
                @foreach (var status in Enum.GetValues(typeof(IndustryX.Domain.Entities.OrderStatus)))
                {
                    var isSelected = selectedStatus == status.ToString();
                    <option value="@status" selected="@(isSelected ? "selected" : null)">@status</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Customer</label>
            <input type="text" name="customer" value="@customerQuery" class="form-control" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Start Date</label>
            <input type="date" name="startDate" value="@startDate" class="form-control" />
        </div>
        <div class="col-md-2">
            <label class="form-label">End Date</label>
            <input type="date" name="endDate" value="@endDate" class="form-control" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Page Size</label>
            <select name="pageSize" class="form-select">
                @foreach (var size in new[] { 10, 20, 50, 100 })
                {
                    <option value="@size" selected="@(selectedPageSize == size ? "selected" : null)">@size</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <button type="submit" class="btn btn-primary w-100">
                <i class="fas fa-filter me-1"></i> Filter
            </button>
        </div>
    </form>

    <!-- Orders List -->
    @if (!Model.Any())
    {
        <div class="alert alert-warning text-center">No orders found.</div>
    }
    else
    {
        foreach (var order in Model)
        {
            <div class="card mb-4">
                <div class="card-header bg-white d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@(order.User?.Firstname + " " + order.User?.Surname ?? "N/A")</strong>
                        | <small class="text-muted">@order.CreatedAt.ToString("dd MMM yyyy HH:mm")</small>
                    </div>
                    <div>
                        <span class="badge bg-@GetStatusColor(order.Status) me-2">@order.Status</span>
                        @if (order.IsPaid)
                        {
                            <span class="badge bg-success">Paid</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Unpaid</span>
                        }
                    </div>
                </div>

                <div class="card-body">
                    <p class="mb-2"><strong>Shipping:</strong> @order.ShippingAddress.FullName - @order.ShippingAddress.FullAddress, @order.ShippingAddress.City / @order.ShippingAddress.Country</p>

                    <table class="table table-sm table-bordered text-center mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Product</th>
                                <th>Quantity</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in order.OrderItems)
                            {
                                <tr>
                                    <td>@item.SalesProduct?.Name</td>
                                    <td>@item.Quantity</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="card-footer bg-white text-end">
                    <a asp-action="Detail" asp-route-id="@order.Id" class="btn btn-sm btn-outline-primary">
                        <i class="fas fa-eye"></i> View
                    </a>

                    @if (order.Status is IndustryX.Domain.Entities.OrderStatus.Pending or                   
                   IndustryX.Domain.Entities.OrderStatus.Shipped)
                    {
                        <form asp-action="AdvanceStatus" asp-route-id="@order.Id" method="post" class="d-inline">
                            <button type="submit" class="btn btn-sm btn-success" onclick="return confirm('Advance order status?')">
                                <i class="fas fa-arrow-right"></i> Next
                            </button>
                        </form>
                    }
                </div>
            </div>
        }

        <!-- Pagination -->
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center mt-4">
                @for (int i = 1; i <= ViewBag.TotalPages; i++)
                {
                    bool isActive = i == ViewBag.CurrentPage;
                    <li class="page-item @(isActive ? "active" : "")">
                        <a class="page-link"
                           href="@Url.Action("Index", new {
                               page = i,
                               pageSize = ViewBag.PageSize,
                               status = ViewBag.Status,
                               customer = ViewBag.Customer,
                               startDate = ViewBag.StartDate,
                               endDate = ViewBag.EndDate
                           })">@i</a>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

@functions {
    string GetStatusColor(IndustryX.Domain.Entities.OrderStatus status)
    {
        return status switch
        {
            IndustryX.Domain.Entities.OrderStatus.Pending => "secondary",
            IndustryX.Domain.Entities.OrderStatus.Processing => "info",
            IndustryX.Domain.Entities.OrderStatus.Shipped => "warning",
            IndustryX.Domain.Entities.OrderStatus.Delivered => "success",
            IndustryX.Domain.Entities.OrderStatus.Cancelled => "danger",
            _ => "dark"
        };
    }
}
